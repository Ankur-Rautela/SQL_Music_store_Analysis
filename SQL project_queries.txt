-- Q1 Who is the senior most employee based on job title?


--Ans 1 

SELECT * FROM employee ORDER BY levels DESC LIMIT 1

---Q 2  Which country has the most invoices ?

/*Ans 2 

SELECT COUNT( *) , billing_country 
FROM invoice
GROUP BY billing_country
ORDER BY 1 DESC LIMIT 1 */

--- Q3 What are top 3 values of total invoices?

--Ans 3

 SELECT total FROM invoice ORDER BY total DESC LIMIT 3

/* Q 4  Which city has the best customers? We would like to throw a promotional Music
Festival in the city we made the most money. Write a query that returns one city
that has the highest sum of invoice totals. Return both the city name & sum of all
invoice totals*/

/*Ans 4 -

 SELECT billing_city, SUM(total)  FROM invoice GROUP BY billing_city ORDER BY SUM(total) DESC LIMIT 1  */

/*Q5 - Who is the best customer? The customer who has spent the most money will be declared as the best customer.
Write a query that returns the person who has spent the most money.*/



/*Ans 5- 

SELECT a.customer_id , CONCAT(first_name, last_name), SUM(b.total)  FROM customer AS a JOIN invoice AS b ON 
a.customer_id = b.customer_id GROUP BY a.customer_id ORDER BY SUM(b.total) DESC LIMIT 1*/

/*Q6 - Write a query to return email, first name, last name & Genre of all  Rock Music listeners. 
Return your list ordered Alphabetically by email starting with A? */

/*SELECT * FROM customer

SELECT * FROM genre

SELECT * FROM track 
 
/ * Ans 6 

SELECT DISTINCT e.email, e.first_name, e.last_name, a.genre_id  FROM genre AS a
JOIN track AS b ON a.genre_id = b.genre_id 
JOIN invoice_line AS c ON b.track_id = c.track_id
JOIN invoice AS d ON c.invoice_id = d.invoice_id 
JOIN customer AS e ON d.customer_id = e.customer_id
WHERE a.name LIKE 'Rock'
AND e.email like 'a%' ORDER BY e.email 

SELECT DISTINCT e.email, e.first_name, e.last_name  FROM customer AS e 
JOIN invoice AS i
ON e.customer_id = i.customer_id 
JOIN invoice_line AS l ON i.invoice_id = l.invoice_id
WHERE track_id IN (
	
SELECT track_id FROM track AS t JOIN genre AS g ON t.genre_id = g.genre_id
WHERE g.name LIKE 'Rock')
ORDER BY email*/

/*Q7 - let's invite the artist who has written the most rock music in our dataset. Write  a query that returns
that artist name and total track count of the top 10 rock brands.*/
--SELECT * FROM artist
--SELECT * FROM album

/* Ans 7 - 

SELECT artist.name, artist.artist_id, COUNT(artist.artist_id) As number_of_songs
FROM track JOIN album ON track.album_id = album.album_id JOIN artist 
ON album.artist_id = artist.artist_id JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.name, artist.artist_id
ORDER BY  COUNT(artist.artist_id)  DESC LIMIT 10*/

/*Q8 - Return all the track names that have a song length longer than the average song length. return the name and
milliseconds for each track. Order by the song length with the longest songs listed first.*/

/* Ans 8- SELECT name, milliseconds FROM track WHERE milliseconds > 
(SELECT AVG(milliseconds) FROM track)
ORDER BY milliseconds DESC*/

/* Q 9- Find how much amount spent by each customer on artists? Write a query to return customer name, artist name
and total spent.*/

/* Ans 9 -

 WITH best_selling_artist AS(
  SELECT artist.artist_id AS artist_id, artist.name AS artist_name, SUM(invoice_line.unit_price*invoice_line.quantity)
	AS total_sales
	FROM invoice_line
	JOIN track ON track.track_id = invoice_line.track_id JOIN album ON album.album_id = track.album_id
	JOIN artist ON artist.artist_id = album.artist_id
	GROUP BY 1,2 ORDER BY 3 DESC
	LIMIT 1
)

SELECT c.customer_id, c.first_name, c.last_name, bsa.artist_name, SUM(il.unit_price*il.quantity) FROM invoice i
JOIN customer c ON i.customer_id = c.customer_id JOIN invoice_line il ON il.invoice_id = i.invoice_id 
JOIN track t ON t.track_id = il.track_id JOIN album alb ON alb.album_id = t.album_id
JOIN best_selling_artist bsa ON bsa.artist_id = alb.artist_id
GROUP BY 1,2,3,4 ORDER BY 5 DESC  */

/* Q10 - We want to find out the most popular music Genre for each country. We determine the most popular Genre
as the genre with highest amount of purchases. Write a query that returns each country along with top genre. 
For countries where max number of purchases is shared, return all Genres.*/

/* Ans 10

WITH popular_genre AS
(
SELECT COUNT(invoice_line.quantity) AS purchases, customer.country, genre.name, genre.genre_id,
ROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity)DESC) AS RowNo
FROM invoice_line JOIN invoice ON invoice_line.invoice_id = invoice.invoice_id JOIN
customer ON invoice.customer_id = customer.customer_id JOIN track ON track.track_id = invoice_line.track_id 
JOIN genre ON genre.genre_id = track.genre_id 
GROUP BY 2,3,4
ORDER BY 2 ASC, 1 DESC
)
SELECT * FROM popular_genre WHERE RowNo <= 1 */



/* Q11 - Write a query that determines the customer that has spent the most on music for each country. Write a query
that returns the country along with the top customer and how much they spent. For countries where the top amount spent
is shared, provide all customers who spent this amount. */

/*
Ans 11

WITH RECURSIVE
customer_with_country AS (
SELECT customer.customer_id,customer.first_name, customer.last_name, invoice.billing_country, SUM(invoice.total) 
AS total_spending FROM invoice 
JOIN customer ON customer.customer_id  = invoice.customer_id
GROUP BY 1,2,3,4 
ORDER BY 1 ,5 DESC),

country_max_spending AS (
	SELECT billing_country, MAX(total_spending) AS max_spending
	FROM customer_with_country
	GROUP BY billing_country
)

SELECT cc.billing_country, cc.total_spending, cc.first_name, cc.last_name, cc.customer_id
FROM customer_with_country cc JOIN country_max_spending ms
ON cc.billing_country = ms.billing_country
WHERE cc.total_spending = ms.max_spending
ORDER BY 1


*/




